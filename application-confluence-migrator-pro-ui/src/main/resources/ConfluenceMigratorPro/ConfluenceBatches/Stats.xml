<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ConfluenceMigratorPro.ConfluenceBatches.Stats" locale="">
  <web>ConfluenceMigratorPro.ConfluenceBatches</web>
  <name>Stats</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Stats</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="ConfluenceMigratorPro.ConfluenceBatches.Code.CommonCode" /}}

{{velocity}}
  #if ($request.confirm)
    #if ($request.computeunhandledparameters)
      #set ($jobId = "confluence/batches/computetimestats/$request.batch")
    #else
      #set ($jobId = "confluence/batches/computeunhandledparameters/$request.batch")
    #end
  #else
    #set ($jobId = "")
  #end
{{/velocity}}

{{job grouppath="ConfluenceMigratorPro.ConfluenceBatches.stats" id="{{velocity}}$jobId{{/velocity}}" start="{{velocity}}$!request.confirm{{/velocity}}"}}
{{groovy}}
  import org.xwiki.logging.LogLevel;

  services.logging.setLevel(doc.fullName, LogLevel.INFO);
  services.logging.setLevel("BatchStatsScriptService", LogLevel.INFO);
  def batchDoc = xwiki.getDocument("ConfluenceMigratorPro.ConfluenceBatches.Batches." + request.batch);
  if (batchDoc != null) {
    try {
      if (request.computeunhandledparameters) {
        services.get("ConfluenceMigratorPro.ConfluenceBatches.stats").computeAndSaveUnhandledParameters(batchDoc, request.ignore);
      } else {
        services.get("ConfluenceMigratorPro.ConfluenceBatches.stats").computeAndSaveTimeAnalysis(batchDoc);
      }
    } catch (Exception e) {
      services.logger.error("Failed to compute", e);
    }
  }
{{/groovy}}
{{/job}}

{{velocity}}
#if ($request.batch)
  #if ($request.confirm)

    [[Refresh&gt;&gt;$doc.fullName||queryString="batch=$escapetool.url($request.batch)"]]

  #else
    #set ($batchDoc = $xwiki.getDocument("ConfluenceMigratorPro.ConfluenceBatches.Batches.${request.batch}"))
    Batch [[$batchDoc]]:

    = Time and issues stats

    #set ($computeURL = "$doc.fullName||queryString='batch=${escapetool.url($request.batch)}&amp;jobId=$!{escapetool.url($jobId)}&amp;confirm=true' class='btn btn-primary'")
    #set ($timecsv = $batchDoc.getAttachment("time.csv"))
    #if ($objecttool.isNull($timecsv))

      [[Compute&gt;&gt;$computeURL]]

    #else
      #set ($discard = $xwiki.ssfx.use("js/xwiki/table/table.css"))
      #set ($discard = $xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true))
      (% class="grid sortable filterable doOddEven" id="statstable" %)
      (% class="sortHeader" %)#foreach ($line in $timecsv.getContentAsString().split("\n"))
        #if ($foreach.first)
          #set ($sep = "|=")
        #else
          #set ($sep = "|")
        #end
        #foreach ($cell in $line.split(","))
          #if ($foreach.first &amp;&amp; $sep == "|")
            ${sep}[[$services.rendering.escape($cell, $xwiki.currentContentSyntaxId)]]##
          #else
            $sep$services.rendering.escape($cell, $xwiki.currentContentSyntaxId)##
          #end
        #end

      #end

      Direct link to the CSV file: [[attach:${batchDoc.fullName}@time.csv]]

      [[Force recompute&gt;&gt;$computeURL]]
    #end

    = Unhandled macros and macro parameters

    #macro(esc $v)
      $services.rendering.escape($v.toString(), $xwiki.currentContentSyntaxId)##
    #end
    #macro(listMigrations $migrations)
      #foreach ($migration in $migrations)[[$migration]]#if (!$foreach.last),{ }#end#end##
    #end
    #set ($showMigrations = $request.showMigrations)
    #set ($parametersJSONFile = $batchDoc.getAttachment("unhandledParameters.json"))
    #set ($macrosJSONFile = $batchDoc.getAttachment("unhandledMacros.json"))
    #if ($objecttool.isNotNull($macrosJSONFile) || $objecttool.isNotNull($parametersJSONFile))
      #if ($showMigrations)
        [[Don't show affected migrations&gt;&gt;$doc.fullName||queryString='batch=${escapetool.url($request.batch)}']]
      #else
        [[Show affected migrations&gt;&gt;$doc.fullName||queryString='batch=${escapetool.url($request.batch)}&amp;showMigrations=true']]
      #end
    #end
    #if ($objecttool.isNotNull($macrosJSONFile))
      #set ($macrosJSON = $jsontool.fromString($macrosJSONFile.getContentAsString()))

      == Macros

      #if ($macrosJSON.isEmpty())
       No macros to show.
      #else

        {{info}}
        In this section, the macro names are those after conversion. A macro is considered unhandled if the converted macro doesn't have an implementation installed in this wiki.
        {{/info}}

        #set ($discard = $xwiki.ssfx.use("js/xwiki/table/table.css"))
        #set ($discard = $xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true))
        (% class="grid sortable filterable doOddEven" id="unhandledmacrostable" %)
        (% class="sortHeader" %)|=Macro|=Migration count|=Page count|=Total count#if($showMigrations)|=Migrations#end

        #foreach($macroEntry in $macrosJSON.entrySet())
          #set ($macroName = $macroEntry.getKey())
          #set ($info = $macroEntry.getValue())
            |#esc($macroName)|$info.migrations.size()|$info.pages|$info.count#if ($showMigrations)|#listMigrations($info.migrations)#end

        #end
      #end

      Direct link to the JSON file: [[attach:${batchDoc.fullName}@unhandledMacros.json]]
    #end
    #if ($objecttool.isNotNull($parametersJSONFile))
      #set ($parametersJSON = $jsontool.fromString($parametersJSONFile.getContentAsString()))

      == Parameters

      Total: $parametersJSON.total

      Ignored parameters: #if($parametersJSON.ignored.isEmpty())None#else{{code language=none}}$parametersJSON.ignored{{/code}}#end

      #set ($discard = $xwiki.ssfx.use("js/xwiki/table/table.css"))
      #set ($discard = $xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true))
      (% class="grid sortable filterable doOddEven" id="unhandledparamstable" %)
      (% class="sortHeader" %)|=Macro|=Parameter|=Value|=Migration count|=Total count#if($showMigrations)|=Migrations#end

      #foreach($macroEntry in $parametersJSON.parameterNames.entrySet())
        #set ($macroName = $macroEntry.getKey())
        #foreach ($parameterEntry in $macroEntry.getValue().entrySet())
          #set ($parameterName = $parameterEntry.getKey())
          #set ($info = $parameterEntry.getValue())
          |#esc($macroName)|#esc($parameterName)||$info.migrations.size()|$info.count#if ($showMigrations)|#listMigrations($info.migrations)#end

        #end
      #end
      #foreach ($macroEntry in $parametersJSON.parameterValues.entrySet())
        #set ($macroName = $macroEntry.getKey())
        #foreach ($parameterEntry in $macroEntry.getValue().entrySet())
          #set ($parameterName = $parameterEntry.getKey())
          #foreach ($valueEntry in $parameterEntry.getValue().entrySet())
            #set ($valueName = $valueEntry.getKey())
            #set ($info = $valueEntry.getValue())
            |#esc($macroName)|#esc($parameterName)|#esc($valueName)|$info.migrations.size()|$info.count#if ($showMigrations)|#listMigrations($info.migrations)#end

          #end
        #end
      #end

      Direct link to the JSON file: [[attach:${batchDoc.fullName}@unhandledParameters.json]]

    #end

    {{html}}
    &lt;form method="get" class="xform"&gt;
      &lt;dl&gt;
        &lt;dt&gt;
          &lt;label for="ignore"&gt;Ignore parameters and values&lt;/label&gt;
          &lt;span class="xHint"&gt;Pipe-separated list of parameters or parameter values to ignore. Write the name  of a macro if all unhandled parameters of this macro are to be ignored. Ignored parameters are shaped like &lt;code&gt;macroName:parameterName&lt;/code&gt;, ignored values like &lt;code&gt;macroName:parameterName=value&lt;/code&gt;. No escaping or quoting is supported yet.&lt;br /&gt;For example, &lt;code&gt;multiexcerpt-fast-include-inline-macro|livesearch:type=spacedesc|multiexcerpt-include-macro:macro_uuid&lt;/code&gt; will ignore all unhandled parameters of multiexcerpt-fast-include-inline-macro, the spacedesc value of the type parameter of livesearch and the macro_uuid parameter of multiexcerpt-include-macro.&lt;/span&gt;
        &lt;/dt&gt;
        &lt;dd&gt;&lt;input type="text" name="ignore" id="ignore"#if($parametersJSON.ignored){ }value="$escapetool.xml($parametersJSON.ignored)"#end&gt;&lt;/dd&gt;
      &lt;/dl&gt;
      &lt;p&gt;&lt;button class="btn btn-primary" name="confirm" value="true"&gt;
        #if ($objecttool.isNull($parametersJSONFile))
          Compute
        #else
          Recompute
        #end
      &lt;/button&gt;&lt;/p&gt;
      &lt;input type="hidden" name="batch" value="$escapetool.xml($request.batch)" /&gt;
      &lt;input type="hidden" name="computeunhandledparameters" value="true" /&gt;
    &lt;/form&gt;
  #end
#else

  {{html}}
    &lt;form method="get"&gt;
      #getBatches
      #displaySelectBatches("batch")
      &lt;button class="btn btn-primary"&gt;See&lt;/button&gt;
    &lt;/form&gt;
  {{/html}}

#end

{{/velocity}}</content>
</xwikidoc>
